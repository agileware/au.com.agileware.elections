<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2018
 *
 * Generated from /var/www/wpcivicrm540/wp-content/uploads/civicrm/ext/au.com.agileware.elections/xml/schema/CRM/Elections/Election.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:25cdf14457819ed48fb856811f4bc65c)
 */

/**
 * Database access object for the Election entity.
 */
class CRM_Elections_DAO_Election extends CRM_Core_DAO {

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  static $_tableName = 'civicrm_election';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  static $_log = TRUE;

  /**
   * Unique Election ID
   *
   * @var int unsigned
   */
  public $id;

  /**
   * Name of the election.
   *
   * @var string
   */
  public $name;

  /**
   * @var text
   */
  public $description;

  /**
   * Election visibility start date
   *
   * @var datetime
   */
  public $visibility_start_date;

  /**
   * Election visibility end date
   *
   * @var datetime
   */
  public $visibility_end_date;

  /**
   * Election nomination start date
   *
   * @var datetime
   */
  public $nomination_start_date;

  /**
   * Election nomination end date
   *
   * @var datetime
   */
  public $nomination_end_date;

  /**
   * Date from when candidates are available for viewing.
   *
   * @var datetime
   */
  public $advertise_candidates_date;

  /**
   * Election voting start date
   *
   * @var datetime
   */
  public $voting_start_date;

  /**
   * Election voting end date
   *
   * @var datetime
   */
  public $voting_end_date;

  /**
   * Election result date, after this date election results are published.
   *
   * @var datetime
   */
  public $result_date;

  /**
   * Election result status, for admins to manage election result visibility manually.
   *
   * @var int unsigned
   */
  public $result_status;

  /**
   * Boolean field to soft delete an election.
   *
   * @var boolean
   */
  public $is_deleted;

  /**
   * Boolean field to set if election is visible or not.
   *
   * @var boolean
   */
  public $is_visible;

  /**
   * Boolean field to set if results are generated.
   *
   * @var boolean
   */
  public $has_results_generated;

  /**
   * Boolean field to anonymize votes when results are generated.
   *
   * @var boolean
   */
  public $anonymize_votes;

  /**
   * Number of required nominations to become eligible candidate.
   *
   * @var unsigned
   */
  public $required_nominations;

  /**
   * Boolean field to set if members are allowed to revote in election.
   *
   * @var boolean
   */
  public $allow_revote;

  /**
   * List of groups, members of it are allowed to participate in election.
   *
   * @var text
   */
  public $allowed_groups;

  /**
   * Date on which election created.
   *
   * @var timestamp
   */
  public $created_at;

  /**
   * Date on which election was updated.
   *
   * @var timestamp
   */
  public $updated_at;

  /**
   * FK to Contact who created particular election
   *
   * @var int unsigned
   */
  public $created_by;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_election';
    parent::__construct();
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static ::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'created_by', 'civicrm_contact', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => ts('Unique Election ID'),
          'required' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
        ],
        'name' => [
          'name' => 'name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Name'),
          'description' => ts('Name of the election.'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'import' => TRUE,
          'where' => 'civicrm_election.name',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
        ],
        'description' => [
          'name' => 'description',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('Description'),
          'description' => ts('Short description of this election.'),
          'import' => TRUE,
          'where' => 'civicrm_election.description',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
        ],
        'visibility_start_date' => [
          'name' => 'visibility_start_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => ts('Visibility Start Date'),
          'description' => ts('Election visibility start date.'),
          'import' => TRUE,
          'where' => 'civicrm_election.visibility_start_date',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
        ],
        'visibility_end_date' => [
          'name' => 'visibility_end_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => ts('Visibility End Date'),
          'description' => ts('Election visibility end date.'),
          'import' => TRUE,
          'where' => 'civicrm_election.visibility_end_date',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
        ],
        'nomination_start_date' => [
          'name' => 'nomination_start_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => ts('Nomination Start Date'),
          'description' => ts('Election nomination start date.'),
          'import' => TRUE,
          'where' => 'civicrm_election.nomination_start_date',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
        ],
        'nomination_end_date' => [
          'name' => 'nomination_end_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => ts('Nomination End Date'),
          'description' => ts('Election nomination end date.'),
          'import' => TRUE,
          'where' => 'civicrm_election.nomination_end_date',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
        ],
        'advertise_candidates_date' => [
          'name' => 'advertise_candidates_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => ts('Advertise Candidates Date'),
          'description' => ts('Date from when candidates are available for viewing.'),
          'import' => TRUE,
          'where' => 'civicrm_election.advertise_candidates_date',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
        ],
        'voting_start_date' => [
          'name' => 'voting_start_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => ts('Voting Start Date'),
          'description' => ts('Election voting start date.'),
          'import' => TRUE,
          'where' => 'civicrm_election.voting_start_date',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
        ],
        'voting_end_date' => [
          'name' => 'voting_end_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => ts('Voting End Date'),
          'description' => ts('Election voting end date.'),
          'import' => TRUE,
          'where' => 'civicrm_election.voting_end_date',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
        ],
        'result_date' => [
          'name' => 'result_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => ts('Result Date'),
          'description' => ts('Election result date, after this date election results are published.'),
          'import' => TRUE,
          'where' => 'civicrm_election.result_date',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
        ],
        'result_status' => [
          'name' => 'result_status',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Result Status'),
          'description' => ts('Election result status, for admins to manage election result visibility manually.'),
          'import' => TRUE,
          'where' => 'civicrm_election.result_status',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
          ],
        ],
        'is_deleted' => [
          'name' => 'is_deleted',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'description' => ts('Boolean field to soft delete an election.'),
          'export' => TRUE,
          'where' => 'civicrm_election.is_deleted',
          'headerPattern' => '',
          'dataPattern' => '',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
        ],
        'is_visible' => [
          'name' => 'is_visible',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'description' => ts('Boolean field to set if election is visible or not.'),
          'export' => TRUE,
          'where' => 'civicrm_election.is_visible',
          'headerPattern' => '',
          'dataPattern' => '',
          'default' => '1',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
        ],
        'has_results_generated' => [
          'name' => 'has_results_generated',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Has Results Generated'),
          'description' => ts('Boolean field to set if results are generated.'),
          'export' => TRUE,
          'where' => 'civicrm_election.has_results_generated',
          'headerPattern' => '',
          'dataPattern' => '',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
        ],
        'anonymize_votes' => [
          'name' => 'anonymize_votes',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Anonymize Votes'),
          'description' => ts('Boolean field to anonymize votes when results are generated.'),
          'export' => TRUE,
          'where' => 'civicrm_election.anonymize_votes',
          'headerPattern' => '',
          'dataPattern' => '',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
        ],
        'allow_revote' => [
          'name' => 'allow_revote',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Allow Re-vote'),
          'description' => ts('Boolean field to set if members are allowed to re-vote in election.'),
          'export' => TRUE,
          'where' => 'civicrm_election.allow_revote',
          'headerPattern' => '',
          'dataPattern' => '',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
        ],
        'allowed_groups' => [
          'name' => 'allowed_groups',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('Allowed Groups'),
          'description' => ts('Select one or more groups of contacts that are allowed to participate in the election.'),
          'import' => TRUE,
          'where' => 'civicrm_election.allowed_groups',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
          ],
        ],
        'required_nominations' => [
          'name' => 'required_nominations',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Required Nominations'),
          'description' => ts('Number of required nominations to become an eligible candidate.'),
          'import' => TRUE,
          'where' => 'civicrm_election.required_nominations',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
        ],
        'created_at' => [
          'name' => 'created_at',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => ts('Created At'),
          'description' => ts('Election created date.'),
          'export' => TRUE,
          'where' => 'civicrm_election.created_at',
          'headerPattern' => '',
          'dataPattern' => '',
          'default' => 'CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
        ],
        'updated_at' => [
          'name' => 'updated_at',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => ts('Updated At'),
          'description' => ts('Election updated date.'),
          'required' => FALSE,
          'export' => TRUE,
          'where' => 'civicrm_election.updated_at',
          'headerPattern' => '',
          'dataPattern' => '',
          'default' => 'CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
        ],
        'created_by' => [
          'name' => 'created_by',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Created By'),
          'description' => ts('FK to Contact who created particular election.'),
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'localizable' => 0,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'election', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'election', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
