<?php

use CRM_Elections_ExtensionUtil as E;

/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2018
 *
 * Generated from /var/www/civicrm530/sites/default/files/civicrm/ext/au.com.agileware.elections/xml/schema/CRM/Elections/ElectionNomination.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:f70ed2c39d539ddbd3176ffc9e97d5b9)
 */

/**
 * Database access object for the ElectionNomination entity.
 */
class CRM_Elections_DAO_ElectionNomination extends CRM_Core_DAO {

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  static $_tableName = 'civicrm_election_nomination';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  static $_log = TRUE;

  /**
   * Unique ElectionNomination ID
   *
   * @var int unsigned
   */
  public $id;

  /**
   * @var text
   */
  public $comments;

  /**
   * @var text
   */
  public $rejection_comments;

  /**
   * Boolean field to identity if nomination is a valid candidate.
   *
   * @var boolean
   */
  public $is_eligible_candidate;

  /**
   * Boolean field to identity if nomination has been accepted by candidate.
   *
   * @var boolean
   */
  public $has_accepted_nomination;

  /**
   * Boolean field to identity if nomination has been rejected by candidate.
   *
   * @var boolean
   */
  public $has_rejected_nomination;

  /**
   * Date on which election nomination created.
   *
   * @var timestamp
   */
  public $created_at;

  /**
   * Date on which election nomination was updated.
   *
   * @var timestamp
   */
  public $updated_at;

  /**
   * FK to Contact for which this nomination is added.
   *
   * @var int unsigned
   */
  public $member_nominee;

  /**
   * FK to ElectionPosition for which this nomination is added.
   *
   * @var int unsigned
   */
  public $election_position_id;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_election_nomination';
    parent::__construct();
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static ::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'member_nominee', 'civicrm_contact', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'election_position_id', 'civicrm_election_position', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Unique Election Nomination ID'),
          'required' => TRUE,
          'table_name' => 'civicrm_election_nomination',
          'entity' => 'ElectionNomination',
          'bao' => 'CRM_Elections_DAO_ElectionNomination',
          'localizable' => 0,
        ],
        'comments' => [
          'name' => 'comments',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Comments'),
          'import' => TRUE,
          'where' => 'civicrm_election_nomination.comments',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election_nomination',
          'entity' => 'ElectionNomination',
          'bao' => 'CRM_Elections_DAO_ElectionNomination',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
        ],
        'rejection_comments' => [
          'name' => 'rejection_comments',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Rejection Comments'),
          'import' => TRUE,
          'where' => 'civicrm_election_nomination.rejection_comments',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election_nomination',
          'entity' => 'ElectionNomination',
          'bao' => 'CRM_Elections_DAO_ElectionNomination',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
        ],
        'is_eligible_candidate' => [
          'name' => 'is_eligible_candidate',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'description' => E::ts('Boolean field to identity if nomination is a valid candidate.'),
          'import' => TRUE,
          'where' => 'civicrm_election_nomination.is_eligible_candidate',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election_nomination',
          'entity' => 'ElectionNomination',
          'bao' => 'CRM_Elections_DAO_ElectionNomination',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
        ],
        'has_accepted_nomination' => [
          'name' => 'has_accepted_nomination',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Has Accepted Nomination'),
          'description' => E::ts('Boolean field to identity if nomination has been accepted by candidate.'),
          'import' => TRUE,
          'where' => 'civicrm_election_nomination.has_accepted_nomination',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election_nomination',
          'entity' => 'ElectionNomination',
          'bao' => 'CRM_Elections_DAO_ElectionNomination',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
        ],
        'has_rejected_nomination' => [
          'name' => 'has_rejected_nomination',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Has Rejected Nomination'),
          'description' => E::ts('Boolean field to identity if nomination has been rejected by candidate.'),
          'import' => TRUE,
          'where' => 'civicrm_election_nomination.has_rejected_nomination',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => TRUE,
          'table_name' => 'civicrm_election_nomination',
          'entity' => 'ElectionNomination',
          'bao' => 'CRM_Elections_DAO_ElectionNomination',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
        ],
        'created_at' => [
          'name' => 'created_at',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => E::ts('Created At'),
          'description' => E::ts('Date on which election nomination created.'),
          'export' => TRUE,
          'where' => 'civicrm_election_nomination.created_at',
          'headerPattern' => '',
          'dataPattern' => '',
          'default' => 'CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_election_nomination',
          'entity' => 'ElectionNomination',
          'bao' => 'CRM_Elections_DAO_ElectionNomination',
          'localizable' => 0,
        ],
        'updated_at' => [
          'name' => 'updated_at',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => E::ts('Updated At'),
          'description' => E::ts('Date on which election nomination was updated.'),
          'required' => FALSE,
          'export' => TRUE,
          'where' => 'civicrm_election_nomination.updated_at',
          'headerPattern' => '',
          'dataPattern' => '',
          'default' => 'CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_election_nomination',
          'entity' => 'ElectionNomination',
          'bao' => 'CRM_Elections_DAO_ElectionNomination',
          'localizable' => 0,
        ],
        'member_nominee' => [
          'name' => 'member_nominee',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Member Nominee'),
          'description' => E::ts('FK to Contact for which this nomination is added.'),
          'table_name' => 'civicrm_election_nomination',
          'entity' => 'ElectionNomination',
          'bao' => 'CRM_Elections_DAO_ElectionNomination',
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'localizable' => 0,
        ],
        'election_position_id' => [
          'name' => 'election_position_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Election Position'),
          'description' => E::ts('FK to ElectionPosition for which this nomination is added.'),
          'table_name' => 'civicrm_election_nomination',
          'where' => 'civicrm_election_nomination.election_position_id',
          'entity' => 'ElectionNomination',
          'bao' => 'CRM_Elections_DAO_ElectionNomination',
          'FKClassName' => 'CRM_Elections_DAO_ElectionPosition',
          'localizable' => 0,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'election_nomination', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'election_nomination', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
